This is a test that creates a large number of applications (100) on
each subscribing and publishing node. This is not the use case Haggle
was designed for, but a good stress test to find potential bugs,
especially with the first-class application semantics.  

Note that the delay in the scripts is needed to avoid buffer overflows
on the Haggle service port, which is shared between applications on a
single node. Remove the sleep at your own risk. In that case we, you
may want to use a small number of concurrent applications, e.g. 10.

A typical test is the following:
- start sub.sh at one node in the network
- start pub.sh at some other node
- check if all data objects have been received based on the haggletest log files
- start sub.sh on other nodes to exercise the query mode
- you may want to monitor the status of the log files generated by sub.sh with ls -l
- generally all data objects should be received after waiting a sufficently long time

We have tested this on CORE with Linux containers and the following configuration files:
- config-prophets.xml (enhanced version of prophet but no optimizations)
- config-flood-direct.xml (to use the original Haggle semantics with aggregation)
- config-flood-direct-fca.xml (to excersise first-class applications)
