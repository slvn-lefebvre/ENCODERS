This directory holds two test programs to test the content-based cache replacement algorithm
that enhances Haggle's opportunistic caching by purging obsolete data in a content-aware manneer
No actual GPS data is used or generated. Instead a fixed location string is used, because
only the timestamps matter for the algorithm.

To enable content-based caching please use the config file haggle/resouces/config-caching.xml 
IMPORTANT: It needs to be installed as config.xml for Haggle to find it.

Both test programs have to be launched through the adb shell.
When compiling them from source you need the agcc toolchain for standalone
native Android apps installed (see setup/CHaggleAppForAndroid.txt for details).

The test programs are using the following attributes (configurable in config.xml):

Name				Value
ContentType		=	GPS
ContentOriginator	=	UniqueID string
Location		=	Location string
ContentCreationTime	=	Integer value (unix time() format)

ContentType is the type of content, and dictates action taken upon the
data.  In this case "GPS" means 'keep the latest GPS data'.  Thus, if
it receives your GPS data with a timestamp of 500, and there is
earlier GPS data, from you, with an earlier timestamp (e.g. 400), it
will replace the earlier GPS data with later GPS data.

ContentOriginator is the unique identifier of who sent it.  It can be
rank/name/ssn, anything, as long it is unique to avoid conflict from
another user.

Location is any string value, having meaning only to the
sending/receiving nodes.

ContentCreationTime is an integer timestamp from unix time() format
(Number of seconds since Jan 1, 1970).

All values are strings (even TimeStamp Value, but its an ASCII
representation of the number).

Test Program 1: gps_test
------------------------

The first program gps_test is started without any parameters on a
single node. It publishes location beacons for three persons, one of
them publishing location updates repeatedly. Ocassionally obsolete
location data is published (timestamp < 100).  If the content-based
caching module ReplacementTotalOrder is enabled in the config.xml file
no obsolete beacons should be shown.  Without content-based
opportunistic caching (basic caching in Haggle) you will see that
obsolete data is received by the application. You can remove the
Replacement section from the DataManager in config.xml to test this.

Test Program 2: gps_person
--------------------------

This is intended for a setup with two or more nodes. gps_test should
be launched on each node with a different person name.


Program Descriptions:

gps_person: 
    This is a generic person, with options to control every parameter.
    The following parameters are supported:

Optional:
-r 0/1/2		: Listen for 'ContentType=GPS', and print results to CLI. 
                          0=off, 1=print all, 2=print all but me
-t <time in seconds>	: Time between each GPS beacon broadcast.  Default 15 seconds.
-j <time in seconds>	: +/- seconds added to each beacon broadcast (jitter).  Default 3 seconds.
-m <number>		: Maximum amount of GPS beacon broadcasts.   Default is 1000.
-l <string>		: Location.   Default is "Nowhere"

-n <name> 		: use <name> for ContentOriginator value string and client haggle handle name.   
                          Default is "Godzilla".   WARNING!   If you don't have unique names, 
                          the GPS data will appear to be from same originator!

Default setting: The name is Godzilla and a GPS beacon is sent 
every 10 +/- 2 seconds (8-12 seconds). In the default setting
all beacons are printed, including my own.

The program will immediately send out a preliminary beacon when
activated.  Then it is listening for GPS beacons, and print them to
the screen.

A simple test setup is to use two nodes which are initally connected,
so they should see each others beacons. Using ifconfig you may
disconnct the two nodes and reconnect after say one minute. Now the
two nodes should exchange only the two most recent becons and continue
to track each other as before. Without content-based caching you will
see that upon reconnection all accumulated beacons will be exchanged
and printed.


