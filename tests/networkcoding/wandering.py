#!/usr/bin/python 

# Copyright (c)2010-2012 the Boeing Company.
# See the LICENSE file included in this distribution.

# connect n nodes to a WLAN; one node wanders around randomly
# launch CORE services (cored.py) so that GUI may be connected 

### begin from cored.py
import SocketServer, fcntl, struct, sys, threading, time, traceback
import os, sys, optparse, ConfigParser, gc, shlex, random
import atexit
import signal
### end from cored.py
import datetime

from core import pycore
from core.misc import ipaddr
### begin from cored.py
from core.constants import *
from core.api import coreapi
from core.coreobj import PyCoreNet
from core.misc.utils import hexdump
from core.mobility import BasicRangeModel
### end from cored.py

sys.path.append('/usr/local/sbin')
import cored
from core.service import CoreService, addservice


class MyHaggleService(CoreService):
    ''' This is a sample user-defined service.
    '''
    # a unique name is required, without spaces
    _name = "MyHaggleService"
    # you can create your own group here
    _group = "CustomUtility"
    # list of other services this service depends on
    _depends = ()
    # per-node directories
    _dirs = ('/home/core/.Haggle',)
    # generated files (without a full path this file goes in the node's dir,
    #  e.g. /tmp/pycore.12345/n1.conf/)
    _configs = ('haggleservice.sh', )
    # this controls the starting order vs other enabled services
    _startindex = 50
    # list of startup commands, also may be generated during startup
    _startup = ('sh haggleservice.sh',)
    # list of shutdown commands
    _shutdown = ()

    @classmethod
    def generateconfig(cls, node, filename, services):
        ''' Return a string that will be written to filename, or sent to the
            GUI for user customization.
        '''
        cfg = "#!/bin/sh\n"
        cfg += "# auto-generated by HaggleService (sample.py)\n"
        #cfg += "/sbin/ifconfig eth0 netmask 255.255.255.252\n"
        #cfg += "/sbin/ifconfig eth0 broadcast 10.0.0.255\n"
	cfg += "/sbin/ifconfig eth0 broadcast 10.83.255.255\n"
        cfg += "/sbin/route add default eth0\n"
        cfg += "cp /home/core/config.xml home.core..Haggle \n"
        cfg += "chown -R core home.core..Haggle \n"

        return cfg


# this line is required to add the above class to the list of available services
addservice(MyHaggleService)


# node list (count from 1)
nodes = [None]

def main():
    usagestr = "usage: %prog [-h] [options] [args]"
    parser = optparse.OptionParser(usage = usagestr)
    parser.set_defaults(numnodes = 5)

    parser.add_option("-n", "--numnodes", dest = "numnodes", type = int,
                      help = "number of nodes")

    def usage(msg = None, err = 0):
        sys.stdout.write("\n")
        if msg:
            sys.stdout.write(msg + "\n\n")
        parser.print_help()
        sys.exit(err)

    # parse command line options
    (options, args) = parser.parse_args()

    if options.numnodes < 1:
        usage("invalid number of nodes: %s" % options.numnodes)

    for a in args:
        sys.stderr.write("ignoring command line argument: '%s'\n" % a)

    start = datetime.datetime.now()

    prefix = ipaddr.IPv4Prefix("10.83.0.0/16")
    session = pycore.Session(persistent=True)
    wlan = session.addobj(cls = pycore.nodes.WlanNode, name = "wlan")
    values = BasicRangeModel.getdefaultvalues()
    wlan.setmodel(BasicRangeModel, values)
    wlan.setposition(x=80,y=50)
    print "creating %d nodes with addresses from %s" % \
          (options.numnodes, prefix)
    model = "PC"
    for i in xrange(1, options.numnodes + 1):
        n = session.addobj(cls = pycore.nodes.CoreNode, name = "n%d" % i,
                             objid=i)
        n.type = model
        n.newnetif(wlan, ["%s/%s" % (prefix.addr(i), prefix.prefixlen)])
	#n.newnetif(wlan, ["%s/%s" % (prefix.addr(i), 32)])
        n.cmd(["sysctl", "net.ipv4.icmp_echo_ignore_broadcasts=0"])
        n.setposition(x=150*i,y=150)
        session.services.addservicestonode(n, model, "DefaultRoute", False)
        session.services.addservicestonode(n, model, "MyHaggleService", False)
        session.services.bootnodeservices(n)        
        nodes.append(n)
	wlan.link(nodes[1].netif(0), n.netif(0))
    #wlan.link(nodes[0].netif(0), nodes[-1].netif(0))
    wlan.link(nodes[1].netif(0), nodes[2].netif(0))

    # start a shell on node 1
    nodes[1].term("bash")
    nodes[1].term("bash")
    nodes[2].term("bash")
    nodes[2].term("bash")
    nodes[3].term("bash")
    nodes[4].term("bash")

    print "elapsed time: %s" % (datetime.datetime.now() - start)

#    t = threading.Thread(target = wandering_node, args=(nodes[1],))
#    t.start()

    # now we launch cored.py services so GUI can connect to this script
    print "launching cored services"
    # the following lines are from cored.py cored()
    cfg, args = cored.getMergedConfig("%s/core.conf" % CORE_CONF_DIR)
    cored.banner()
    server = cored.CoreServer(("localhost", coreapi.CORE_API_PORT),
                              cored.CoreRequestHandler, cfg)
    print "adding session %s to cored.server" % session.sessionid
    server.addsession(session)
    print "running cored server - you may now connect the GUI"
    try:
        server.serve_forever()
    except KeyboardInterrupt:
        pass

def wandering_node(node, maxspeed=15, sleeptime=2):
    while True:
        if not node.up:
            break
        (x,y,z) = node.getposition()
        x += random.randint(-maxspeed, maxspeed)
        y += random.randint(-maxspeed, maxspeed)
        print "Node %s moving to (%d,%d)" % (node.objid, x,y)
        node.setposition(x,y,z)
        # tell any connected GUI about the movement
        tlvdata = coreapi.CoreNodeTlv.pack(coreapi.CORE_TLV_NODE_NUMBER,
                                           node.objid)
        tlvdata += coreapi.CoreNodeTlv.pack(coreapi.CORE_TLV_NODE_XPOS, x)
        tlvdata += coreapi.CoreNodeTlv.pack(coreapi.CORE_TLV_NODE_YPOS, y)
        msg = coreapi.CoreNodeMessage.pack(0, tlvdata)
        node.session.broadcastraw(None, msg)

        time.sleep(sleeptime)

if __name__ == "__main__":
    main()
