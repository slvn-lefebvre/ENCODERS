Using the picture test-setup.png as a template, we have 12 nodes, divided into four social groups.

Nodes 1-3 are social group 'A'.
Nodes 4-6 are social group 'B'.
Nodes 7-9 are social group 'C'.
Nodes 10-12 are social group 'undefined' (not defined).

This test only is to prove that nodes can retain/prefer to cache their own social content.

We use the following conditions:
1.  Each node publishes 1 data object for their social group and to a global attribute (plt=plt).
    a.   Thus, there will be 3 DO's for social group 'A', 3 for 'B', and 3 for 'C'.
2.  Each node is interested in their social group, and in the global attribute (plt=plt).
3.  The undefined nodes are ONLY subscribed to global attribute (plt=plt).

Thus, we have the following criteria to be successful:

1.  100% delivery rate (which translates to 15 Receives, 12 per node, 3 for the extra haggletest subscribing to the specific social group).
2.  Each node in the social group has all of their social group content in cache when the test finishes.   E.g.  Nodes 1-3, each of those nodes, 
will contain all 3 squad=A attribute DO's.   In reality, they may have 1-2 more content for other social groups, but we wont test for that.
3.  In addition to 100% social group caching, we will test it against Neighborhood utility (only) caching, for comparison.   Neighborhood tends to 
be temporally inclined (e.g. earlier received, earlier distributed, more likely to be purged, somewhere in the network).    Our social neighborhood is immune to this effect.


If we had a single social group for all nodes, that behavior would be how Neighborhood (by itself) should be identical SocialNeighborhood.
